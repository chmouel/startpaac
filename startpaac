#!/usr/bin/env bash
# Copyright 2024 Chmouel Boudjnah <chmouel@chmouel.com>
# shellcheck disable=SC2046,SC1091
set -eufo pipefail

scale_downs_controller=""

Miself=$(readlink -f "$0")
SP=$(dirname ${Miself})
source ${SP}/lib/common.sh
source ${SP}/lib/config.sh

PAC_CONTROLLER_TARGET_NS=pipelines-as-code
[[ -z ${PAC_DIR:-""} ]] && {
  echo "You really need to set the PAC_DIR variable in your ${CONFIG_FILE}"
  exit 1
}

if ! check_tools; then
  exit 1
fi

cd ${PAC_DIR:-""} || {
  echo "cannot find the pipelines-as-code directory, set the PAC_DIR variable to where you have checked out the github.com/openshift-pipelines/pipelines-as-code repository in your ${HOME}/.config/startpaac/config"
  exit 1
}

[[ -n "$*" && "${*}" == *\ local ]] && TARGET_HOST=local

TARGET_HOST=${TARGET_HOST:-}
DOMAIN_NAME=${DOMAIN_NAME:-""}
PAAC=${PAAC:-""}
REGISTRY=${REGISTRY:-""}
KO_EXTRA_FLAGS=${KO_EXTRA_FLAGS:-""}
FORGE_HOST=${FORGE_HOST:-""}
INSTALL_GITHUB_SECOND_CTRL=${INSTALL_GITHUB_SECOND_CTRL:-""}
INSTALL_FORGE=${INSTALL_FORGE:-"true"}
PAC_PASS_SECOND_FOLDER=${PAC_PASS_SECOND_FOLDER:-}

if [[ ${TARGET_HOST} == local ]]; then
  KO_EXTRA_FLAGS=(--insecure-registry)
  DOMAIN_NAME=${TARGET_HOST}
  REGISTRY=registry.127.0.0.1.nip.io
  FORGE_HOST=gitea.127.0.0.1.nip.io
  TARGET_BIND_IP=127.0.0.1
  DASHBOARD=dashboard.127.0.0.1.nip.io
  PAAC=paac.127.0.0.1.nip.io
fi
[[ -z ${DOMAIN_NAME} || -z ${TARGET_HOST} || -z ${TARGET_BIND_IP} || -z ${REGISTRY} || -z ${DASHBOARD} || -z ${PAAC} ]] && {
  echo "Need to set DOMAIN_NAME, TARGET_HOST, TARGET_BIND_IP, REGISTRY, DASHBOARD and PAAC in your $HOME/.config/startpaac/config"
  exit 1
}

TMPFILE=$(mktemp /tmp/.mm.XXXXXX)
# shellcheck disable=SC2317
clean() { rm -f ${TMPFILE}; }
trap clean EXIT

export KUBECONFIG=${KUBECONFIG:-$HOME/.kube/config.${DOMAIN_NAME%%.*}}

if [[ -z ${TARGET_HOST} ]] || [[ -z ${DOMAIN_NAME} ]] || [[ -z ${REGISTRY} ]] || [[ -z ${KUBECONFIG} ]]; then
  echo "Need env variable TARGET_HOST, DOMAIN_NAME and REGISTRY"
  exit 1
fi

show_config() {
  local smee_url
  if [[ -n ${PAC_PASS_SECRET_FOLDER:-""} ]]; then
    smee_url=$(pass show ${PAC_PASS_SECRET_FOLDER}/smee)
  elif [[ -n ${PAC_SECRET_FOLDER:-""} ]]; then
    smee_url=$(cat ${PAC_SECRET_FOLDER}/smee)
  fi
  cat <<EOF
Using configuration on ${TARGET_HOST}:

DOMAIN_NAME: ${DOMAIN_NAME},
TARGET_BIND_IP: ${TARGET_BIND_IP}
PAAC: https://${PAAC}
REGISTRY: https://${REGISTRY}
FORGE_HOST: https://${FORGE_HOST}
DASHBOARD: https://${DASHBOARD}
  GOSMEE:
  gosmee client --saveDir /tmp/replay ${smee_url} https://${PAAC}
EOF
}

cache_yaml_file() {
  local type="$1"
  local url="$2"
  local cache_dir="${HOME}/.cache/startpaac"
  local filename="${cache_dir}/${type}.yaml"
  mkdir -p ${cache_dir}

  if [[ ! -e ${filename} ]]; then
    curl --progress-bar -L --location --retry 10 --retry-max-time 10 -o ${filename} ${url}
  fi
  echo ${filename}
}

check_kind() {
  output=$(ssh -q "${TARGET_HOST}" which kind || true)
  if [[ "${output}" == *"not found" ]]; then
    echo "Kind is not installed on ${TARGET_HOST}"
    exit 1
  fi
}

install_kind() {
  [[ "${TARGET_HOST}" != local ]] && check_kind
  stop_kind
  show_step "Creating kind cluster"
  local kfilename=${SP}/lib/kind/kind.yaml
  sed -e "s/%REGISTRY%/${REGISTRY}/" -e "s/%TARGET_BIND_IP%/${TARGET_BIND_IP}/" ${kfilename} >$TMPFILE
  case ${TARGET_HOST} in
  local)
    kind create cluster --kubeconfig ${KUBECONFIG} --config ${TMPFILE}
    ;;
  *)
    scp -q "${TMPFILE}" "${TARGET_HOST}":/tmp/.kind.yaml
    ssh -q "${TARGET_HOST}" kind create cluster --kubeconfig .kube/$(basename ${KUBECONFIG}) --config /tmp/.kind.yaml
    ;;
  esac
}

install_nginx() {
  local release_yaml
  show_step "Installing nginx ingress"
  release_yaml=$(cache_yaml_file nginx https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml)
  kubectl apply -f "${release_yaml}" >/dev/null
  kubectl -n ingress-nginx annotate ingressclasses nginx ingressclass.kubernetes.io/is-default-class="true" --overwrite=true
  wait_for_it ingress-nginx ingress-nginx-controller
}

install_registry() {
  show_step "Installing registry"
  "${SP}"/lib/registry/install.sh ${REGISTRY} ${TARGET_HOST}
}

install_tekton() {
  local release_yaml
  show_step "Deploying Tekton"
  release_yaml=$(cache_yaml_file tekton https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml)
  kubectl apply --filename "${release_yaml}" >/dev/null
  wait_for_it tekton-pipelines tekton-pipelines-webhook
  kubectl patch configmap -n tekton-pipelines --type merge -p '{"data":{"enable-step-actions": "true"}}' feature-flags
}

install_dashboard() {
  local release_yaml
  show_step "Deploying Tekton Dashboard"
  release_yaml=$(cache_yaml_file dashboard https://storage.googleapis.com/tekton-releases/dashboard/latest/release.yaml)
  kubectl apply --filename "${release_yaml}" >/dev/null
  create_ingress tekton-pipelines tekton-dashboard ${DASHBOARD} 9097
}

stop_kind() {
  show_step "Stopping Kind"

  case ${TARGET_HOST} in
  local)
    kind delete cluster --name kind
    ;;
  *)
    ssh -q "${TARGET_HOST}" kind delete cluster --name kind
    ;;
  esac
  rm -f "${KUBECONFIG}"
}

install_pac() {
  if [[ -n ${1:-""} ]]; then
    show_step "Deploying PAC $1"
  else
    show_step "Deploying PAC"
  fi
  local c=config
  case ${1:-""} in
  controller)
    c=${c}/400-controller.yaml
    ;;
  watcher)
    c=${c}/500-watcher.yaml
    ;;
  webhook)
    c=${c}/600-webhook.yaml
    ;;
  esac
  env KO_DOCKER_REPO="${REGISTRY}" ko apply -f "${c}" -B --sbom=none "${KO_EXTRA_FLAGS[@]}"

  for controller in ${scale_downs_controller}; do
    kubectl scale deployment -n pipelines-as-code -l app.kubernetes.io/name=${controller} --replicas=0
  done
}

create_pac_secret() {
  folder=$1
  shift
  secret_name=$1
  shift
  read -a read_method <<<"$@"

  kubectl delete secret ${secret_name} -n pipelines-as-code 2>/dev/null || true
  kubectl create secret generic ${secret_name} -n pipelines-as-code
  for passk in github-application-id github-private-key webhook.secret; do
    if [[ ${passk} == *-key ]]; then
      b64d=$("${read_method[@]}" "${folder}"/${passk} | base64 -w0)
    else
      b64d=$(echo -n $("${read_method[@]}" "${folder}"/${passk}) | base64 -w0)
    fi
    kubectl patch secret -n pipelines-as-code -p "{\"data\":{\"${passk}\": \"${b64d}\"}}" \
      --type merge ${secret_name} >/dev/null
  done
}

configure_pac() {
  local pac_controller_secret=${pac_controller_secret:-pipelines-as-code-secret}
  show_step "Configuring PAC"

  create_ingress pipelines-as-code pipelines-as-code-controller "${PAAC}" 8080

  kubectl patch configmap -n pipelines-as-code -p \
    "{\"data\":{\"bitbucket-cloud-check-source-ip\": \"false\"}}" pipelines-as-code
  kubectl patch configmap -n pipelines-as-code -p \
    "{\"data\":{\"tekton-dashboard-url\": \"http://${DASHBOARD}\"}}" --type merge pipelines-as-code
  kubectl patch configmap -n pipelines-as-code -p \
    '{"data":{"catalog-1-id": "custom", "catalog-1-name": "tekton", "catalog-1-url": "https://api.hub.tekton.dev/v1"}}' \
    --type merge pipelines-as-code

  if [[ -n ${PAC_PASS_SECRET_FOLDER:-""} ]]; then
    echo "Installing PAC secrets from pass folder: ${PAC_PASS_SECRET_FOLDER}"
    create_pac_secret ${PAC_PASS_SECRET_FOLDER} ${pac_controller_secret} pass show
  elif [[ -n ${PAC_SECRET_FOLDER:-""} ]]; then
    echo "Installing PAC secrets from plain text folder: ${PAC_SECRET_FOLDER}"
    create_pac_secret ${PAC_SECRET_FOLDER} ${pac_controller_secret} cat
  else
    cat <<EOF
  **No secret has been installed**

  You need to either create a pass https://www.passwordstore.org/ folder with
  github-application-id github-private-key webhook.secret information in there
  and export the PAC_PASS_SECRET_FOLDER variable to that folder

  Or have a plain text folder with the same structure and export the
  PAC_SECRET_FOLDER variable

  Or have nothing and install the secrets manually after running the startpaac
  script.
EOF
    kubectl delete secret -n pipelines-as-code pipelines-as-code-secret >/dev/null 2>/dev/null || true
  fi
}

function install_forgejo() {
  show_step "Installing Forgejo"
  "${SP}"/lib/forgejo/install.sh ${1}
}

function sync_kubeconfig() {
  [[ ${TARGET_HOST} == local ]] && return
  show_step "Syncing kubeconfig"
  scp -q "${TARGET_HOST}":.kube/$(basename ${KUBECONFIG}) "${KUBECONFIG}"
  echo "${KUBECONFIG} from ${TARGET_HOST} has been updated"
  chmod 600 "${KUBECONFIG}"
}

function start_user_gosmee() {
  local service=${1:-"gosmee"}
  local smeeurl=${2:-}
  local controllerURL=${3:-}
  type -p systemctl >/dev/null 2>/dev/null && return
  [[ -e ${HOME}/.config/systemd/user/${service}.service ]] || {
    if [[ -n ${smeeurl} ]]; then
      show_step "Run gosmee manually"
      echo "gosmee client --saveDir /tmp/replay ${smeeurl} https://${controllerURL}"
    else
      echo "Skipping running gosmee: cannot find ${HOME}/.config/systemd/user/${service}.service"
    fi
    return
  }
  show_step "Running ${service} systemd service locally for user $USER"
  systemctl --user restart ${service} >/dev/null 2>&1 || true
  systemctl --user status ${service} -o cat
  if kubectl get deployment gosmee-ghe -n "${PAC_CONTROLLER_TARGET_NS}" >/dev/null 2>&1; then
    kubectl scale deployment gosmee-ghe -n "${PAC_CONTROLLER_TARGET_NS}" --replicas=0 >/dev/null || true
    echo "Deployment $(echo_color red gosmee-ghe) has been scaled down"
  fi
}

function install_github_second_ctrl() {
  show_step "Installing GHE second controller for github"
  local pac_controller_label=ghe
  local pac_controller_secret=${pac_controller_label}-secret
  local pac_controller_configmap=${pac_controller_label}-configmap
  local kind_url=http://${DASHBOARD}
  [[ -z ${PAC_PASS_SECOND_FOLDER:-} && -z ${PAC_SECOND_SECRET_FOLDER:-} ]] && {
    echo "You need to set the PAC_PASS_SECOND_FOLDER or PAC_SECOND_SECRET_FOLDER variables in your ${CONFIG_FILE}"
    exit 1
  }
  if [[ -n ${PAC_PASS_SECOND_FOLDER} ]]; then
    local password_store_path=${PASSWORD_STORE_DIR:-$HOME/.password-store}
    [[ -d ${password_store_path}/${PAC_PASS_SECOND_FOLDER} ]] || {
      echo "secondSecret ${PAC_PASS_SECOND_FOLDER} does not exist"
      echo "set environment variable PAC_PASS_SECOND_FOLDER to the correct pass folder"
      exit 1
    }
    echo "Using pass_secret_folder: ${PAC_PASS_SECOND_FOLDER}"
    pac_controller_smee_url=$(pass show ${PAC_PASS_SECOND_FOLDER} | sed -n '/SMEE_URL/ { s/.*=//;p}')
  elif [[ -n ${PAC_SECOND_SECRET_FOLDER} ]]; then
    if [[ ! -d ${PAC_SECOND_SECRET_FOLDER} ]]; then
      echo "folder for second secret ${PAC_SECOND_SECRET_FOLDER} does not exist"
      echo "set environment variable PAC_SECOND_SECRET_FOLDER to the correct folder with all your environment secrets"
      exit 1
    fi
    echo "Using secret_folder: ${PAC_SECOND_SECRET_FOLDER}"
    pac_controller_smee_url=$(cat ${PAC_SECOND_SECRET_FOLDER}/smee)
  fi
  export pac_controller_smee_url
  hack/second-controller.py ${pac_controller_label} | tee /tmp/.second.controller.debug.yaml | env KO_DOCKER_REPO="${REGISTRY}" ko apply -f- -B --sbom=none "${KO_EXTRA_FLAGS[@]}"
  kubectl patch configmap -n ${PAC_CONTROLLER_TARGET_NS} -p '{"data":{"application-name": "Pipelines as Code GHE"}}' ${pac_controller_configmap}
  kubectl patch configmap -n ${PAC_CONTROLLER_TARGET_NS} -p "{\"data\":{\"tekton-dashboard-url\": \"${kind_url}\"}}" --type merge ${pac_controller_configmap}
  kubectl patch configmap -n ${PAC_CONTROLLER_TARGET_NS} -p '{"data":{"catalog-2-id": "custom2", "catalog-2-name": "tekton", "catalog-2-url": "https://api.hub.tekton.dev/v1"}}' --type merge ${pac_controller_configmap}
  kubectl delete secret ${pac_controller_secret} -n ${PAC_CONTROLLER_TARGET_NS} >/dev/null 2>/dev/null || true
  kubectl create secret generic ${pac_controller_secret} -n ${PAC_CONTROLLER_TARGET_NS} >/dev/null
  if [[ -n ${PAC_PASS_SECOND_FOLDER} ]]; then
    echo "Installing PAC secrets from pass folder: ${PAC_PASS_SECRET_FOLDER}"
    create_pac_secret ${PAC_PASS_SECOND_FOLDER} ${pac_controller_secret} pass show
  elif [[ -n ${PAC_SECOND_SECRET_FOLDER} ]]; then
    echo "Installing PAC secrets from plain text folder: ${PAC_SECOND_SECRET_FOLDER}"
    create_pac_secret ${PAC_SECOND_SECRET_FOLDER} ${pac_controller_secret} cat
  else
    cat <<EOF
No secret has been installed.

You need to either create a pass https://www.passwordstore.org/ folder with github-application-id
github-private-key webhook.secret information in there and export the PAC_PASS_SECOND_FOLDER variable
to that folder

Or have a plain text folder with the same structure and export the PAC_SECOND_SECRET_FOLDER variable"

Or have nothing and install the secrets manually after running the startpaac script.
EOF
  fi

  local targetUrl=${pac_controller_label}.${DOMAIN_NAME}
  if [[ ${DOMAIN_NAME} == "local" ]]; then
    targetUrl=${pac_controller_label}.127.0.0.1.nip.io
  fi
  show_step "Creating ingress for ${pac_controller_label} controller"
  create_ingress ${PAC_CONTROLLER_TARGET_NS} ${pac_controller_label}-controller "${targetUrl}" 8080
  kubectl delete deployment -n ${PAC_CONTROLLER_TARGET_NS} gosmee-${pac_controller_label} 2>/dev/null || true
  start_user_gosmee ghe ${pac_controller_smee_url} "${targetUrl}"
}

function install_custom_objects() {
  show_step "Installing custom Objects"
  [[ -d ${INSTALL_CUSTOM_OBJECT} ]] || {
    echo "Cannot find ${INSTALL_CUSTOM_OBJECT} directory"
    exit 1
  }
  kubectl apply -f ${INSTALL_CUSTOM_OBJECT}
}

function set_namespace() {
  local ns=${1:-"default"}
  kubectl config set-context --current --namespace=${ns}
}

all() {
  sync_kubeconfig
  install_nginx
  install_registry
  install_tekton
  install_dashboard
  install_pac
  configure_pac
  [[ -z ${INSTALL_GITHUB_SECOND_CTRL} && ${INSTALL_FORGE} == true ]] && install_forgejo ${FORGE_HOST}
  [[ -n ${INSTALL_CUSTOM_OBJECT:-} ]] && install_custom_objects

  start_user_gosmee gosmee

  show_step "Setting current namespace context to pipelines-as-code"
  set_namespace pipelines-as-code
}

function help() {
  # Define color variables
  local NO_COLOR='\033[0m'
  local BOLD='\033[1m'

  echo -e "${BOLD}program.sh [options]${NO_COLOR}
    "
  grep -E '^\s*-.*\)\s*#' "$Miself" | sed -e 's/^[ ]*//' -e "s/\(.*\)) # /\1 @ /" | column -t -s $'@'
  echo -e "
${BOLD}Author: Chmouel Boudjnah <chmouel@chmouel.com>${NO_COLOR}
    "
}

function parse_args() {
  # use getopt to parse arguments
  args=$(getopt \
    -o OHASGsakhgc:p \
    --long \
    "all,
    config,
    all-but-kind,
    all-github-second-no-forgejo
    all-to-tekton,
    configure-pac,
    deploy-component:,
    github-second-ctrl,
    help,
    install-custom-crds,
    install-dashboard,
    install-forge,
    install-nginx,
    install-paac,
    install-registry,
    install-tekton,stop-kind,
    redeploy-kind,
    second-secret:,
    start-user-gosmee,
    sync-kubeconfig
    " -- "$@")
  #shellcheck disable=SC2181
  if [ $? -ne 0 ]; then
    exit 1
  fi
  eval set -- "$args"
  while true; do
    case "$1" in
    -O | --scale-down) # scale down the controller
      scale_downs_controller=$2
      ;;
    -g | --install-forge) # Install Forgejo
      install_forgejo ${FORGE_HOST}
      exit
      ;;
    --stop-kind) # Stop Kind
      stop_kind
      exit
      ;;
    --second-secret) # Set the secret for the second controller
      PAC_PASS_SECOND_FOLDER=$2
      install_github_second_ctrl
      exit
      ;;
    -s | --sync-kubeconfig) # Sync kubeconfig
      sync_kubeconfig
      exit
      ;;
    -S | --github-second-ctrl) # Deploy second controller for github
      install_github_second_ctrl
      exit
      ;;
    -H | --all-github-second-no-forgejo) # Install everything but forgejo
      install_kind
      all
      install_github_second_ctrl
      show_config
      exit
      ;;
    --config) # Show configuration
      show_config
      exit
      ;;
    -G | --start-user-gosmee) # Start gosmee locally for user $USER
      start_user_gosmee gosmee
      exit
      ;;
    -F | --all-but-forge) # Everything but forgejo
      INSTALL_FORGE=false
      all
      exit
      ;;
    --install-registry) # Install dockerk registry
      install_registry
      exit
      ;;
    --install-dashboard) # Install Tekton dashboard
      install_dashboard
      exit
      ;;
    -t | --install-tekton) # Install Tekton
      install_tekton
      exit
      ;;
    --install-nginx) # Install Nginx
      install_nginx
      exit
      ;;
    -a | --all) # Install everything
      install_kind
      all
      show_config
      exit
      ;;
    -A | --all-but-kind) # Install everything but kind
      all
      exit
      ;;
    --all-to-tekton) # Install everything up to Tekton
      install_kind
      sync_kubeconfig
      install_nginx
      install_registry
      install_tekton
      show_config
      exit
      ;;
    -c | --component) # Install a specific component
      install_pac "$2"
      exit
      ;;
    --install-custom-crds) # Install custom crds
      install_custom_crds
      exit
      ;;
    --configure-pac) # Configure PAC
      configure_pac
      exit
      ;;
    -p | --install-paac) # Deploy and configure PAC
      install_pac
      configure_pac
      exit
      ;;
    -k | --kind) # Install Kind
      install_kind
      sync_kubeconfig
      exit
      ;;
    -h | --help) # Show help
      help
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Not implemented"
      help
      exit 1
      ;;
    esac
  done

  show_config
  echo
  echo "We are about to install the following steps:"
  if [[ ${TARGET_HOST} != local ]]; then
    echo " - Install Kind on ${TARGET_HOST}"
  else
    echo " - Install Kind on your local machine"
  fi
  echo " - Install Nginx"
  echo " - Install Registry"
  echo " - Install Tekton"
  echo " - Install Tekton Dashboard"
  echo " - Install PAC"
  echo " - Configure PAC"
  echo
  read -p "Do you want to continue? [y/N] " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Exiting"
    exit 1
  fi
  all
  exit
}

parse_args "$@"
