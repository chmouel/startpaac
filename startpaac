#!/usr/bin/env bash
# Copyright 2024 Chmouel Boudjnah <chmouel@chmouel.com>
# shellcheck disable=SC2046,SC1091
set -eufo pipefail

script_path=$(readlink -f "$0")
SP=$(dirname ${script_path})
source ${SP}/lib/common.sh
source ${SP}/lib/config.sh
source ${SP}/lib/kind/kind.sh
source ${SP}/lib/tls.sh
source ${SP}/lib/tekton.sh
source ${SP}/lib/nginx.sh

PAC_CONTROLLER_TARGET_NS=pipelines-as-code
[[ -z ${PAC_DIR:-""} ]] && {
  echo "You really need to set the PAC_DIR variable in your ${CONFIG_FILE}"
  exit 1
}

if ! check_tools; then
  exit 1
fi

cd ${PAC_DIR:-""} || {
  echo "cannot find the pipelines-as-code directory, set the PAC_DIR variable to where you have checked out the github.com/openshift-pipelines/pipelines-as-code repository in your ${HOME}/.config/startpaac/config"
  exit 1
}

[[ -n "$*" && "${*}" == *\ local ]] && TARGET_HOST=local

TARGET_HOST=${TARGET_HOST:-}
DOMAIN_NAME=${DOMAIN_NAME:-""}
PAAC=${PAAC:-""}
REGISTRY=${REGISTRY:-""}
KO_EXTRA_FLAGS=${KO_EXTRA_FLAGS:-""}
FORGE_HOST=${FORGE_HOST:-""}
INSTALL_GITHUB_SECOND_CTRL=${INSTALL_GITHUB_SECOND_CTRL:-""}
INSTALL_FORGE=${INSTALL_FORGE:-"true"}
PAC_PASS_SECOND_FOLDER=${PAC_PASS_SECOND_FOLDER:-}

if [[ ${TARGET_HOST} == local ]]; then
  KO_EXTRA_FLAGS=(--insecure-registry)
  DOMAIN_NAME=${TARGET_HOST}
  REGISTRY=registry.127.0.0.1.nip.io
  FORGE_HOST=gitea.127.0.0.1.nip.io
  TARGET_BIND_IP=127.0.0.1
  DASHBOARD=dashboard.127.0.0.1.nip.io
  PAAC=paac.127.0.0.1.nip.io
fi
[[ -z ${DOMAIN_NAME} || -z ${TARGET_HOST} || -z ${TARGET_BIND_IP} || -z ${REGISTRY} || -z ${DASHBOARD} || -z ${PAAC} ]] && {
  echo "Need to set DOMAIN_NAME, TARGET_HOST, TARGET_BIND_IP, REGISTRY, DASHBOARD and PAAC in your $HOME/.config/startpaac/config"
  exit 1
}

SCALE_DOWNS_CONTROLLER=${PAC_SCALE_DOWNS_CONTROLLER:-""}
TMPFILE=$(mktemp /tmp/.mm.XXXXXX)
# shellcheck disable=SC2317
clean() { rm -f ${TMPFILE}; }
trap clean EXIT

export KUBECONFIG=${KUBECONFIG:-$HOME/.kube/config.${DOMAIN_NAME%%.*}}

if [[ -z ${TARGET_HOST} ]] || [[ -z ${DOMAIN_NAME} ]] || [[ -z ${REGISTRY} ]] || [[ -z ${KUBECONFIG} ]]; then
  echo "Need env variable TARGET_HOST, DOMAIN_NAME and REGISTRY"
  exit 1
fi

all() {
  sync_kubeconfig
  install_nginx
  install_registry
  install_tekton
  install_dashboard
  install_pac
  configure_pac
  [[ -z ${INSTALL_GITHUB_SECOND_CTRL} && ${INSTALL_FORGE} == true ]] && install_forgejo ${FORGE_HOST}
  install_custom_crds

  start_user_gosmee gosmee

  show_step "Setting current namespace context to pipelines-as-code"
  set_namespace pipelines-as-code
}

function help() {
  # Define color variables
  local NO_COLOR='\033[0m'
  local BOLD='\033[1m'

  echo -e "${BOLD}program.sh [options]${NO_COLOR}
    "
  grep -E '^\s*-.*\)\s*#' "$script_path" | sed -e 's/^[ ]*//' -e "s/\(.*\)) # /\1 @ /" | column -t -s $'@'
  echo -e "
${BOLD}Author: Chmouel Boudjnah <chmouel@chmouel.com>${NO_COLOR}
    "
}

function parse_args() {
  # use getopt to parse arguments
  args=$(getopt \
    -o OHASGsakhgc:p \
    --long \
    "all,
    config,
    all-but-kind,
    all-github-second-no-forgejo
    all-to-tekton,
    configure-pac,
    deploy-component:,
    github-second-ctrl,
    help,
    install-custom-crds,
    install-dashboard,
    install-forge,
    install-nginx,
    install-paac,
    install-registry,
    install-tekton,stop-kind,
    redeploy-kind,
    second-secret:,
    start-user-gosmee,
    sync-kubeconfig
    " -- "$@")
  #shellcheck disable=SC2181
  if [ $? -ne 0 ]; then
    exit 1
  fi
  eval set -- "$args"
  while true; do
    case "$1" in
    -O | --scale-down) # scale down the controller
      SCALE_DOWNS_CONTROLLER=$2
      ;;
    -g | --install-forge) # Install Forgejo
      install_forgejo ${FORGE_HOST}
      exit
      ;;
    --stop-kind) # Stop Kind
      stop_kind
      exit
      ;;
    --second-secret) # Set the secret for the second controller
      PAC_PASS_SECOND_FOLDER=$2
      install_github_second_ctrl
      exit
      ;;
    -s | --sync-kubeconfig) # Sync kubeconfig
      sync_kubeconfig
      exit
      ;;
    -S | --github-second-ctrl) # Deploy second controller for github
      install_github_second_ctrl
      exit
      ;;
    -H | --all-github-second-no-forgejo) # Install everything but forgejo
      install_kind
      all
      install_github_second_ctrl
      show_config
      exit
      ;;
    --config) # Show configuration
      show_config
      exit
      ;;
    -G | --start-user-gosmee) # Start gosmee locally for user $USER
      start_user_gosmee gosmee
      exit
      ;;
    -F | --all-but-forge) # Everything but forgejo
      INSTALL_FORGE=false
      all
      exit
      ;;
    --install-registry) # Install dockerk registry
      install_registry
      exit
      ;;
    --install-dashboard) # Install Tekton dashboard
      install_dashboard
      exit
      ;;
    -t | --install-tekton) # Install Tekton
      install_tekton
      exit
      ;;
    --install-nginx) # Install Nginx
      install_nginx
      exit
      ;;
    -a | --all) # Install everything
      install_kind
      all
      show_config
      exit
      ;;
    -A | --all-but-kind) # Install everything but kind
      all
      exit
      ;;
    --all-to-tekton) # Install everything up to Tekton
      install_kind
      sync_kubeconfig
      install_nginx
      install_registry
      install_tekton
      show_config
      exit
      ;;
    -c | --component) # Install a specific component
      install_pac "$2"
      exit
      ;;
    --install-custom-crds) # Install custom crds
      install_custom_crds
      exit
      ;;
    --configure-pac) # Configure PAC
      configure_pac
      exit
      ;;
    -p | --install-paac) # Deploy and configure PAC
      install_pac
      configure_pac
      exit
      ;;
    -k | --kind) # Install Kind
      install_kind
      sync_kubeconfig
      exit
      ;;
    -h | --help) # Show help
      help
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Not implemented"
      help
      exit 1
      ;;
    esac
  done

  show_config
  echo
  echo "We are about to install the following steps:"
  if [[ ${TARGET_HOST} != local ]]; then
    echo " - Install Kind on ${TARGET_HOST}"
  else
    echo " - Install Kind on your local machine"
  fi
  echo " - Install Nginx"
  echo " - Install Registry"
  echo " - Install Tekton"
  echo " - Install Tekton Dashboard"
  echo " - Install PAC"
  echo " - Configure PAC"
  echo
  read -p "Do you want to continue? [y/N] " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Exiting"
    exit 1
  fi
  all
  exit
}

parse_args "$@"
